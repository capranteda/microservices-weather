using Cloudweather.Temperature.DataAccess;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<TemperatureDbContext>(options =>
{
    // EnableSensitiveDataLogging allows you to see the SQL generated by EF Core
    options.EnableSensitiveDataLogging();
    // EnableDetailedErrors allows you to see the actual error message from the database
    options.EnableDetailedErrors();
    // UseNpgsql is the EF Core provider for PostgreSQL
    options.UseNpgsql(builder.Configuration.GetConnectionString("AppDb"));
}, ServiceLifetime.Transient);
var app = builder.Build();

app.MapGet("/observation/{zip}", async (string zip, [FromQuery] int? days, TemperatureDbContext db) =>
{
    if (days is null || days < 0 || days > 30)
    {
        return Results.BadRequest("Please provide a 'days' query parameter between 1 and 30.");
    }

    var startDate = DateTime.UtcNow - TimeSpan.FromDays(days.Value);
    var results = await db.Temperature
        .Where(precip => precip.ZipCode == zip && precip.CreatedOn > startDate)
        .ToListAsync();

    return Results.Ok(results);
});

app.MapPost("/observation", async (Temperature temperature, TemperatureDbContext db) =>
{
    //ToUniversalTime is used to convert the time to UTC
    temperature.CreatedOn = temperature.CreatedOn.ToUniversalTime();
    //AddAsync does not save the changes to the database. What it does is add the entity to the DbContext
    await db.AddAsync(temperature);
    //SaveChangesAsync saves the changes to the database
    await db.SaveChangesAsync();
});



app.Run();