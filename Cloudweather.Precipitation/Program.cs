using Cloudweather.Precipitation.DataAccess;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);


builder.Services.AddDbContext<PreciptDbContext>(options =>
{
    // EnableSensitiveDataLogging allows you to see the SQL generated by EF Core
    options.EnableSensitiveDataLogging();
    // EnableDetailedErrors allows you to see the actual error message from the database
    options.EnableDetailedErrors();
    // UseNpgsql is the EF Core provider for PostgreSQL
    options.UseNpgsql(builder.Configuration.GetConnectionString("AppDb"));
}, ServiceLifetime.Transient);

var app = builder.Build();

app.MapGet("/observation/{zip}", async (string zip, [FromQuery] int? days, PreciptDbContext db) =>
{
    if (days is null || days < 0 || days > 30)
    {
        return Results.BadRequest("Please provide a 'days' query parameter between 1 and 30.");
    }
    var startDate = DateTime.UtcNow - TimeSpan.FromDays(days.Value);
    var results = await db.Precipitation
        .Where(precip => precip.ZipCode == zip && precip.CreatedOn > startDate)
        .ToListAsync();
    
    return Results.Ok(results);
});



app.Run();
