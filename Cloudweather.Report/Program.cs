using Cloudweather.Report.BussinessLogic;
using Cloudweather.Report.Config;
using Cloudweather.Report.DataAccess;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);


builder.Services.AddDbContext<WeatherReportDbContext>(options =>
{

    builder.Services.AddHttpClient();
    builder.Services.AddTransient<IWeatherReportAggregator, WeatherReportAggregator>();
    builder.Services.AddOptions();
    
    builder.Services.Configure<WeatherDataConfig>(builder.Configuration.GetSection("WeatherDataConfig"));
    
    
    // EnableSensitiveDataLogging allows you to see the SQL generated by EF Core
    options.EnableSensitiveDataLogging();
    // EnableDetailedErrors allows you to see the actual error message from the database
    options.EnableDetailedErrors();
    // UseNpgsql is the EF Core provider for PostgreSQL
    options.UseNpgsql(builder.Configuration.GetConnectionString("AppDb"));
}, ServiceLifetime.Transient);

var app = builder.Build();

app.MapGet(
    "/weather-report/{zip}",
    async (string zip, [FromQuery] int? days, IWeatherReportAggregator weatherAgg ) =>
    {
        if(days == null || days > 30 || days < 1)
        {
            return Results.BadRequest("Please provide a valid number of days between 1 and 30");
        }
        var report = await weatherAgg.BuildReport(zip, days.Value);
        return Results.Ok(report);
    });

app.Run();